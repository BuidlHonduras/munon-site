{"version":3,"sources":["utils/getWeb3.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","Header","react_default","createElement","index_es","bg","p","justifyContent","flexDirection","maxWidth","mx","href","fontSize","color","React","Component","App","state","event_count","percentange_participants_getting_more_that_entry","average_ether_collected","average_rating","top_participant_review_average","participant_max_eth_collected","sps_percentange_participants_getting_more_that_entry","sps_average_ether_collected","sps_average_rating","sps_top_participant_review_average","sps_participant_max_eth_collected","tgu_percentange_participants_getting_more_that_entry","tgu_average_ether_collected","tgu_average_rating","tgu_top_participant_review_average","tgu_participant_max_eth_collected","registrations_chart_data","gross_pot","registration_count","componentDidMount","accounts","network_id","deployedNetwork","instance","sent","eth","getAccounts","net","getId","HackathonMunonContract","networks","Contract","abi","address","_this","setState","contract","runExample","alert","error","_callee2","_context2","updateData","assertThisInitialized","that","registration_graph_data","sps_registration_count","tgu_registration_count","getPastEvents","fromBlock","toBlock","events","i","length","eventObj","chart_data_element","returnValues","hackathon_id","blockNumber","parseInt","registrations","sps_registrations","tgu_registrations","push","sponsorship_count","value","utils","fromWei","total_eth_collected","sps_total_eth_collected","tgu_total_eth_collected","participants_collected_more_than_entry_count","sps_participants_collected_more_than_entry_count","sps_total_cashout","tgu_participants_collected_more_than_entry_count","tgu_total_cashout","reward","Math","round","raiting_sum","sps_raiting_sum","tgu_raiting_sum","sps_rating_count","tgu_rating_count","points_by_participant","sps_points_by_participant","tgu_points_by_participant","participant_addresses","sps_participant_addresses","tgu_participant_addresses","points","reviewed_addr","j","top_review_score_average","participant_points","average","sps_top_review_score_average","sps_participant_points","sps_average","tgu_top_review_score_average","tgu_participant_points","tgu_average","rating_count","className","components_Header","index_umd_default","currentNetwork","requiredNetwork","dist_index_umd_default","onWeb3Fallback","name","size","es6","width","height","data","type","dataKey","domain","stroke","connectNulls","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0624928.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://mainnet.infura.io/v3/b77387df3b3c41d69d7f106238a391a6\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\nimport { Box, Heading, Text, Link } from \"rimble-ui\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <Box bg=\"primary\" p={3} justifyContent=\"center\" flexDirection=\"column\">\n        <Box maxWidth=\"600px\" mx=\"auto\">\n          <Link href=\"/\">\n            <Heading fontSize={4} color={\"white\"}>Él Hackathon Muñón results</Heading>\n          </Link>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport HackathonMunonContract from \"./contracts/HackathonMunon.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport {\n  LineChart, Line, XAxis, YAxis, Tooltip, Legend,\n} from 'recharts';\nimport {\n  Heading, Text, Card, Icon, Box\n} from 'rimble-ui';\nimport NetworkIndicator from '@rimble/network-indicator';\nimport ConnectionBanner from '@rimble/connection-banner';\nimport Header from \"./components/Header.js\";\n\n//import \"./App.css\";\n\nclass App extends Component {\n  state = { event_count: 0,\n            percentange_participants_getting_more_that_entry: 0,\n            average_ether_collected: 0,\n            average_rating: 0,\n            top_participant_review_average: 0,\n            participant_max_eth_collected: 0,\n\n            sps_percentange_participants_getting_more_that_entry: 0,\n            sps_average_ether_collected: 0,\n            sps_average_rating: 0,\n            sps_top_participant_review_average: 0,\n            sps_participant_max_eth_collected: 0,\n\n            tgu_percentange_participants_getting_more_that_entry: 0,\n            tgu_average_ether_collected: 0,\n            tgu_average_rating: 0,\n            tgu_top_participant_review_average: 0,\n            tgu_participant_max_eth_collected: 0,\n\n            registrations_chart_data: [{}],\n\n            gross_pot: 0,\n            registration_count: 0,\n            event_count: 0,\n            rating_count: 0,\n            network_id: 0,\n            web3: null, accounts: null, contract: null }\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const network_id = await web3.eth.net.getId();\n      const deployedNetwork = HackathonMunonContract.networks[network_id];\n      const instance = new web3.eth.Contract(\n        HackathonMunonContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, network_id: network_id }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  updateData(_this)\n  {\n    const { contract } = this.state;\n    var that = _this\n\n    var registration_graph_data = [];\n    var sps_registration_count = 0;\n    var tgu_registration_count = 0;\n        contract.getPastEvents('Registration', {\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function(error, events){\n      var i = 0;\n      for (i=0; i<events.length; i++) {\n        var eventObj = events[i];\n\n        var chart_data_element = {};\n        if(events[i].returnValues.hackathon_id === \"1\")\n        {\n          sps_registration_count += 1;\n          chart_data_element = {blockNumber: parseInt(eventObj.blockNumber), registrations: i + 1, sps_registrations: sps_registration_count};\n        }\n        if(events[i].returnValues.hackathon_id === \"2\")\n        {\n          tgu_registration_count += 1;\n          chart_data_element = {blockNumber: parseInt(eventObj.blockNumber), registrations: i + 1, tgu_registrations: tgu_registration_count};\n        }\n        registration_graph_data.push(chart_data_element);\n      }\n      \n      that.setState({ registration_count: i });\n\n      contract.getPastEvents('SponsorshipSubmited', {\n        fromBlock: 0,\n        toBlock: 'latest'\n      }, function(error, events){\n        var i = 0;\n        var sponsorship_count = 0;\n        for (i=0; i<events.length; i++) {\n          var eventObj = events[i];\n          sponsorship_count += parseInt(eventObj.returnValues.value);\n        }\n        that.setState({ gross_pot: that.state.web3.utils.fromWei(\"\"+(sponsorship_count + that.state.registration_count * 30000000000000000), 'ether') });\n      });\n      \n      that.state.registrations_chart_data = registration_graph_data;\n    });\n\n    contract.getPastEvents('CashOut', {\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function(error, events){\n      var participant_max_eth_collected = 0;\n      var sps_participant_max_eth_collected = 0;\n      var tgu_participant_max_eth_collected = 0;\n      var total_eth_collected = 0;\n      var sps_total_eth_collected = 0;\n      var tgu_total_eth_collected = 0;\n      var i = 0;\n      var entrance_fee = 30000000000000000;\n      var participants_collected_more_than_entry_count = 0;\n      var sps_participants_collected_more_than_entry_count = 0;\n      var sps_total_cashout = 0;\n      var tgu_participants_collected_more_than_entry_count = 0;\n      var tgu_total_cashout = 0;\n      for (i=0; i<events.length; i++) {\n        var eventObj = events[i];\n        total_eth_collected += parseInt(eventObj.returnValues.reward);\n        if(participant_max_eth_collected < eventObj.returnValues.reward)\n        {\n          participant_max_eth_collected = eventObj.returnValues.reward;\n        }\n        if(eventObj.returnValues.reward > entrance_fee)\n        {\n          participants_collected_more_than_entry_count += 1;\n          if(eventObj.returnValues.hackathon_id === \"1\")\n            sps_participants_collected_more_than_entry_count += 1;\n          if(eventObj.returnValues.hackathon_id === \"2\")\n            tgu_participants_collected_more_than_entry_count += 1;\n        }\n        if(eventObj.returnValues.hackathon_id === \"1\")\n        {\n          sps_total_cashout += 1;\n          sps_total_eth_collected += parseInt(eventObj.returnValues.reward);\n          if(sps_participant_max_eth_collected < eventObj.returnValues.reward)\n          {\n            sps_participant_max_eth_collected = eventObj.returnValues.reward;\n          }\n        }\n        if(eventObj.returnValues.hackathon_id === \"2\")\n        {\n          tgu_total_cashout += 1;\n          tgu_total_eth_collected += parseInt(eventObj.returnValues.reward);\n          if(tgu_participant_max_eth_collected < eventObj.returnValues.reward)\n          {\n            tgu_participant_max_eth_collected = eventObj.returnValues.reward;\n          }\n        }\n      }\n\n      var average_ether_collected = total_eth_collected/i;\n      var sps_average_ether_collected = sps_total_eth_collected / sps_total_cashout;\n      var tgu_average_ether_collected = tgu_total_eth_collected / tgu_total_cashout;\n      that.setState({\n        event_count: 2,\n        average_ether_collected: Math.round(that.state.web3.utils.fromWei(\"\"+(average_ether_collected*10000), 'ether'))/10000,\n        sps_average_ether_collected: Math.round(that.state.web3.utils.fromWei(\"\"+(sps_average_ether_collected*10000), 'ether'))/10000,\n        tgu_average_ether_collected: Math.round(that.state.web3.utils.fromWei(\"\"+(tgu_average_ether_collected*10000), 'ether'))/10000,\n        participant_max_eth_collected: Math.round(that.state.web3.utils.fromWei(\"\"+(participant_max_eth_collected*10000), 'ether'))/10000,\n        sps_participant_max_eth_collected: Math.round(that.state.web3.utils.fromWei(\"\"+(sps_participant_max_eth_collected*10000), 'ether'))/10000,\n        tgu_participant_max_eth_collected: Math.round(that.state.web3.utils.fromWei(\"\"+(tgu_participant_max_eth_collected*10000), 'ether'))/10000,\n        percentange_participants_getting_more_that_entry: Math.round(participants_collected_more_than_entry_count * 100 / i),\n        sps_percentange_participants_getting_more_that_entry: Math.round(sps_participants_collected_more_than_entry_count * 100 / sps_total_cashout),\n        tgu_percentange_participants_getting_more_that_entry: Math.round(tgu_participants_collected_more_than_entry_count * 100 / tgu_total_cashout)\n      });\n    });\n    contract.getPastEvents('RatingSubmited', {\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function(error, events){\n      var i = 0;\n      var raiting_sum = 0;\n      var sps_raiting_sum = 0;\n      var tgu_raiting_sum = 0;\n      var sps_rating_count = 0;\n      var tgu_rating_count = 0;\n      var points_by_participant = [];\n      var sps_points_by_participant = [];\n      var tgu_points_by_participant = [];\n      var participant_addresses = [];\n      var sps_participant_addresses = [];\n      var tgu_participant_addresses = [];\n      for (i=0; i<events.length; i++) {\n        raiting_sum += parseInt(events[i].returnValues.points);\n\n        if(!points_by_participant[events[i].returnValues.reviewed_addr])\n        {\n          participant_addresses.push(events[i].returnValues.reviewed_addr);\n          points_by_participant[events[i].returnValues.reviewed_addr] = [parseInt(events[i].returnValues.points), 1];\n        }\n        else\n        {\n          points_by_participant[events[i].returnValues.reviewed_addr][0] += parseInt(events[i].returnValues.points);\n          points_by_participant[events[i].returnValues.reviewed_addr][1] += 1;\n        }\n\n        if(events[i].returnValues.hackathon_id === \"1\")\n        {\n          sps_raiting_sum += parseInt(events[i].returnValues.points);\n          sps_rating_count += 1;\n        }\n        if(events[i].returnValues.hackathon_id === \"2\")\n        {\n          tgu_raiting_sum += parseInt(events[i].returnValues.points);\n          tgu_rating_count += 1;\n        }\n\n        if(events[i].returnValues.hackathon_id === \"1\")\n        {\n          if(!sps_points_by_participant[events[i].returnValues.reviewed_addr])\n          {\n            sps_participant_addresses.push(events[i].returnValues.reviewed_addr);\n            sps_points_by_participant[events[i].returnValues.reviewed_addr] = [parseInt(events[i].returnValues.points), 1];\n          }\n          else\n          {\n            sps_points_by_participant[events[i].returnValues.reviewed_addr][0] += parseInt(events[i].returnValues.points);\n            sps_points_by_participant[events[i].returnValues.reviewed_addr][1] += 1;\n          }\n        }\n        if(events[i].returnValues.hackathon_id === \"2\")\n        {\n          if(!tgu_points_by_participant[events[i].returnValues.reviewed_addr])\n          {\n            tgu_participant_addresses.push(events[i].returnValues.reviewed_addr);\n            tgu_points_by_participant[events[i].returnValues.reviewed_addr] = [parseInt(events[i].returnValues.points), 1];\n          }\n          else\n          {\n            tgu_points_by_participant[events[i].returnValues.reviewed_addr][0] += parseInt(events[i].returnValues.points);\n            tgu_points_by_participant[events[i].returnValues.reviewed_addr][1] += 1;\n          }\n        }\n      }\n      \n      var top_review_score_average = 0;\n      var j;\n      for(j=0; j<participant_addresses.length; j++)\n      {\n        var participant_points = points_by_participant[participant_addresses[j]]\n        var average = participant_points[0] / participant_points[1];\n        if(top_review_score_average <  average)\n          top_review_score_average = average;\n      }\n\n      var sps_top_review_score_average = 0;\n      for(j=0; j<sps_participant_addresses.length; j++)\n      {\n        var sps_participant_points = sps_points_by_participant[sps_participant_addresses[j]]\n        var sps_average = sps_participant_points[0] / sps_participant_points[1];\n        if(sps_top_review_score_average <  sps_average)\n          sps_top_review_score_average = sps_average;\n      }\n\n      var tgu_top_review_score_average = 0;\n      for(j=0; j<tgu_participant_addresses.length; j++)\n      {\n        var tgu_participant_points = tgu_points_by_participant[tgu_participant_addresses[j]]\n        var tgu_average = tgu_participant_points[0] / tgu_participant_points[1];\n        if(tgu_top_review_score_average <  tgu_average)\n          tgu_top_review_score_average = tgu_average;\n      }\n      \n      var average_rating = raiting_sum / i;\n      var sps_average_rating = sps_raiting_sum / sps_rating_count;\n      var tgu_average_rating = tgu_raiting_sum / tgu_rating_count;\n      that.setState({ top_participant_review_average: Math.round(top_review_score_average*100)/100 });\n      that.setState({ sps_top_participant_review_average: Math.round(sps_top_review_score_average*100)/100 });\n      that.setState({ tgu_top_participant_review_average: Math.round(tgu_top_review_score_average*100)/100 });\n      that.setState({ average_rating: Math.round(average_rating*100)/100 });\n      that.setState({ sps_average_rating: Math.round(sps_average_rating*100)/100 });\n      that.setState({ tgu_average_rating: Math.round(tgu_average_rating*100)/100 });\n      that.setState({ rating_count: i });\n    });\n  }\n\n  runExample = async () => {\n    if(this.state.network_id === 1)\n      this.updateData(this);\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Box maxWidth={'640px'} mx={'auto'} p={3}>\n          <NetworkIndicator currentNetwork={this.state.network_id} requiredNetwork={1} />\n          <ConnectionBanner\n            currentNetwork={this.state.network_id}\n            requiredNetwork={1}\n            onWeb3Fallback={window.ethereum == null}\n          />\n          <Text>In July 2019, <a href=\"http://munonhack.com\">El Hackathón Muñón</a> powered <b>{this.state.event_count} events</b> one in San Pedro Sula other in Tegucigalpa, Honduras. <b>{ this.state.rating_count } transparent feedback</b> was given by <b>{ this.state.registration_count } participants</b> and <b>a pot of { this.state.gross_pot } ether</b> was distributed.</Text>\n          <Card>\n            <Heading>Total results</Heading>\n            <Icon name=\"Mood\" size=\"30\"/>\n            <Text>{ this.state.percentange_participants_getting_more_that_entry }% participants cashed out more Ether than the entrance fee</Text>\n            <Icon name=\"AccountBalanceWallet\" size=\"30\"/>\n            <Text>Participants collected { this.state.average_ether_collected } average ether</Text>\n            <Icon name=\"Assignment\" size=\"30\"/>\n            <Text>{ this.state.average_rating } / 5 average participant review score</Text>\n            <Icon name=\"Star\" size=\"30\"/>\n            <Text>{ this.state.top_participant_review_average } / 5 top participant review score</Text>\n            <Icon name=\"Whatshot\" size=\"30\"/>\n            <Text>The top participant collected { this.state.participant_max_eth_collected } ether</Text>\n          </Card>\n          \n          <Card>\n            <Heading>San Pedro Sula results</Heading>\n            <Icon name=\"Mood\" size=\"30\"/>\n            <Text>{ this.state.sps_percentange_participants_getting_more_that_entry }% participants cashed out more Ether than the entrance fee</Text>\n            <Icon name=\"AccountBalanceWallet\" size=\"30\"/>\n            <Text>Participants collected { this.state.sps_average_ether_collected } average ether</Text>\n            <Icon name=\"Assignment\" size=\"30\"/>\n            <Text>{ this.state.sps_average_rating } / 5 average participant review score</Text>\n            <Icon name=\"Star\" size=\"30\"/>\n            <Text>{ this.state.sps_top_participant_review_average } / 5 top participant review score</Text>\n            <Icon name=\"Whatshot\" size=\"30\"/>\n            <Text>The top participant collected { this.state.sps_participant_max_eth_collected } ether</Text>\n          </Card>\n          <Card>\n            <Heading>Tegucigalpa results</Heading>\n            <Icon name=\"Mood\" size=\"30\"/>\n            <Text>{ this.state.tgu_percentange_participants_getting_more_that_entry }% participants cashed out more Ether than the entrance fee</Text>\n            <Icon name=\"AccountBalanceWallet\" size=\"30\"/>\n            <Text>Participants collected { this.state.tgu_average_ether_collected } average ether</Text>\n            <Icon name=\"Assignment\" size=\"30\"/>\n            <Text>{ this.state.tgu_average_rating } / 5 average participant review score</Text>\n            <Icon name=\"Star\" size=\"30\"/>\n            <Text>{ this.state.tgu_top_participant_review_average } / 5 top participant review score</Text>\n            <Icon name=\"Whatshot\" size=\"30\"/>\n            <Text>The top participant collected { this.state.tgu_participant_max_eth_collected } ether</Text>\n          </Card>\n          <Card>\n            <Heading>Registration timeline</Heading>\n            <LineChart width={400} height={400} data={ this.state.registrations_chart_data }>\n              <XAxis type=\"number\" dataKey=\"blockNumber\" domain={[this.state.registrations_chart_data[0].blockNumber, this.state.registrations_chart_data[this.state.registrations_chart_data.length-1].blockNumber]} />\n              <YAxis/>\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"registrations\" stroke=\"#6E1EFF\" />\n              <Line connectNulls type=\"monotone\" dataKey=\"sps_registrations\" stroke=\"#0EDA83\" />\n              <Line connectNulls type=\"monotone\" dataKey=\"tgu_registrations\" stroke=\"#F1AF1B\" />\n            </LineChart>\n          </Card>\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}