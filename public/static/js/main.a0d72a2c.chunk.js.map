{"version":3,"sources":["utils/getWeb3.js","components/Header.js","ParticipantData.js","3box.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","Header","react_default","createElement","index_es","bg","p","justifyContent","flexDirection","maxWidth","mx","href","fontSize","color","React","Component","ParticipantData","participantRatings","props","ratings","map","reviewed_name","address","reviewed_addr","truncate","points","name","h4","ThreeBox","require","App","state","hackathon_id","participants_data","network_id","accounts","contract","componentDidMount","values","deployedNetwork","instance","queryString","parse","_this","location","search","setState","sent","eth","getAccounts","net","getId","HackathonMunonContract","networks","Contract","abi","runExample","alert","error","_callee2","_context2","updateData","assertThisInitialized","i","length","getProfile","reviewer_profile","j","k","that","getPastEvents","fromBlock","toBlock","events","eventObj","returnValues","push","participant_addr","reviewer_addr","get3BoxNames","participantData","participant_data","src_ParticipantData","className","components_Header","index_umd_default","currentNetwork","requiredNetwork","dist_index_umd_default","onWeb3Fallback","Boolean","hostname","match","ReactDOM","render","react_router_dom","react_router","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0d72a2c.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://mainnet.infura.io/v3/b77387df3b3c41d69d7f106238a391a6\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\nimport { Box, Heading, Text, Link } from \"rimble-ui\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <Box bg=\"primary\" p={3} justifyContent=\"center\" flexDirection=\"column\">\n        <Box maxWidth=\"600px\" mx=\"auto\">\n          <Link href=\"/\">\n            <Heading fontSize={4} color={\"white\"}>Él Hackathon Muñón results</Heading>\n          </Link>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport { Card, Heading, Text, Box, EthAddress, Table } from \"rimble-ui\";\n\nclass ParticipantData extends Component {\n    render() {\n    const participantRatings = this.props.ratings.map((ratings) =>\n      <tr>\n        <td>\n          {ratings.reviewed_name === \"\" &&\n            <EthAddress\n              address={ratings.reviewed_addr}\n              truncate={true}\n            />\n          }\n          {ratings.reviewed_name !== \"\" &&\n            <Text>{ratings.reviewed_name}</Text>\n          }\n        </td>\n        <td>\n          <Text>{ratings.points}</Text>\n        </td>\n      </tr>\n    );\n    return (\n      <Card>\n        {this.props.name === \"\" &&\n          <Heading.h4>{this.props.address}</Heading.h4>\n        }\n        {this.props.name !== \"\" &&\n          <Heading.h4>{this.props.name}'s ratings</Heading.h4>\n        }\n        <Table>\n          <thead>\n            <tr>\n              <th>Reviewed</th>\n              <th>Points</th>\n            </tr>\n          </thead>\n          <tbody>\n            {participantRatings}\n          </tbody>\n        </Table>\n      </Card>\n    );\n  }\n}\n\nexport default ParticipantData;\n","const ThreeBox = require('3box')\n\nexport default ThreeBox;","import React, { Component } from \"react\";\nimport HackathonMunonContract from \"./contracts/HackathonMunon.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport {\n  Heading, Text, Card, Icon, Box\n} from 'rimble-ui';\nimport NetworkIndicator from '@rimble/network-indicator';\nimport ConnectionBanner from '@rimble/connection-banner';\nimport Header from \"./components/Header.js\";\nimport ParticipantData from \"./ParticipantData\";\nimport ThreeBox from './3box'\nimport queryString from 'query-string'\n\n//import \"./App.css\";\n\nclass App extends Component {\n  state = { hackathon_id: 1, //Hadcoded preset\n            participants_data: [],\n            network_id: 0,\n            web3: null, accounts: null, contract: null }\n  componentDidMount = async () => {\n    try {\n      const values = queryString.parse(this.props.location.search);\n      if(values.hackathon_id)\n        this.setState({hackathon_id: values.hackathon_id});\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const network_id = await web3.eth.net.getId();\n      const deployedNetwork = HackathonMunonContract.networks[network_id];\n      const instance = new web3.eth.Contract(\n        HackathonMunonContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, network_id: network_id }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  async get3BoxNames() {\n    var participants_data = this.state.participants_data;\n    for(var i=0; i<participants_data.length; i++)\n    {\n      const reviewer_profile = await ThreeBox.getProfile(participants_data[i].address);\n      if(reviewer_profile && reviewer_profile.name)\n      {\n        participants_data[i].name = reviewer_profile.name;\n        for(var j=0; j<participants_data.length; j++)\n        {\n          for(var k=0; k<participants_data[j].ratings.length; k++)\n          {\n            if(participants_data[j].ratings[k].reviewed_addr == participants_data[i].address)\n            {\n              participants_data[j].ratings[k].reviewed_name = reviewer_profile.name\n            }\n          }\n        }\n      }\n    }\n    this.setState(participants_data);\n  }\n\n  updateData(_this)\n  {\n    const { contract } = this.state;\n    var that = _this\n\n    contract.getPastEvents('Registration', {\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function(error, events){\n      var i = 0;\n      for (i=0; i<events.length; i++) {\n        var eventObj = events[i];\n        if(that.state.hackathon_id == eventObj.returnValues.hackathon_id)\n        {\n          var participants_data = that.state.participants_data;\n          participants_data.push({address: eventObj.returnValues.participant_addr, name: \"\", ratings: []})\n          that.setState(participants_data)\n        }\n      }\n      \n      contract.getPastEvents('RatingSubmited', {\n        fromBlock: 0,\n        toBlock: 'latest'\n      }, function(error, events){\n        var i = 0;\n        for (i=0; i<events.length; i++) {\n          var eventObj = events[i];\n          if(that.state.hackathon_id == eventObj.returnValues.hackathon_id)\n          {\n            for(var j=0; j<that.state.participants_data.length; j++)\n            {\n              var participant_data = that.state.participants_data[j];\n              if(participant_data.address == eventObj.returnValues.reviewer_addr)\n              {\n                var participants_data = that.state.participants_data;\n                participants_data[j].ratings.push({reviewed_addr: eventObj.returnValues.reviewed_addr, reviewed_name: \"\", points: eventObj.returnValues.points})\n                that.setState(participants_data)\n              }\n            }\n          }\n        }\n\n\n        that.get3BoxNames();\n      });\n    });\n  }\n\n  runExample = async () => {\n    if(this.state.network_id === 1)\n      this.updateData(this);\n  };\n\n  render() {\n    const participantData = this.state.participants_data.map((participant_data) =>\n      <ParticipantData address={participant_data.address} name={participant_data.name} ratings={participant_data.ratings}/>\n    );\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Box maxWidth={'640px'} mx={'auto'} p={3}>\n          <NetworkIndicator currentNetwork={this.state.network_id} requiredNetwork={1} />\n          <ConnectionBanner\n            currentNetwork={this.state.network_id}\n            requiredNetwork={1}\n            onWeb3Fallback={window.ethereum == null}\n          />\n          {participantData}\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction AppRouter() {\n  return (\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={App} />\n    </div>\n  </Router>\n  );\n}\n  \n  //ReactDOM.render(<App />, document.getElementById('root'));\n  \n  ReactDOM.render(\n    AppRouter(),\n    document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}